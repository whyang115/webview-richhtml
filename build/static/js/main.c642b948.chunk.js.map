{"version":3,"sources":["App.jsx","index.js"],"names":["AppWrap","styled","div","EditorDemo","props","computeBottomPadding","$editor","document","querySelector","$control","style","paddingBottom","offsetHeight","randomStr","Math","random","toString","slice","uploadFile","file","error","progress","success","state","uploadServer","token","key","reader","FileReader","readAsDataURL","addEventListener","data","result","get","type","split","fileData","fileName","Base64","encode","formData","FormData","append","axios","url","method","onUploadProgress","loaded","total","then","previewServer","catch","err","handleEditorChange","editorState","setState","window","richTextHtml","toHTML","BraftEditor","createEditorState","preview","getPara","para","JSON","parse","decode","html","rest","switchPreview","str","this","className","cx","dangerouslySetInnerHTML","__html","media","accepts","video","audio","image","externals","embed","uploadFn","controls","title","text","value","onChange","onSave","submitContent","React","Component","sendContent","webkit","messageHandlers","Save","postMessage","Android","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c642b948.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Base64 } from 'js-base64';\nimport styled from 'styled-components';\nimport { get } from 'lodash';\nimport cx from 'classnames';\n// 引入编辑器组件\nimport BraftEditor from 'braft-editor';\n// 引入编辑器样式\nimport 'braft-editor/dist/index.css';\nimport './App.css';\nconst AppWrap = styled.div`\n  height: 100%;\n  .previewWrap {\n    overflow: auto;\n    height: 100%;\n    img {\n      width: 100%;\n    }\n    p {\n      margin: 0;\n    }\n  }\n  .previewContent {\n    padding: 15px;\n  }\n  .braftEditorWrap {\n    overflow: hidden;\n    box-sizing: border-box;\n  }\n  .bf-content {\n    height: 100%;\n  }\n`;\n\nexport default class EditorDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // 创建一个空的editorState作为初始值\n      editorState: BraftEditor.createEditorState(null),\n      token: '',\n      uploadServer: 'https://upload.qiniup.com/putb64/-1/key/upload/',\n      previewServer: 'https://pic.mingdao.com/',\n      key: '',\n      preview: true,\n    };\n    window.getPara = para => {\n      const { html, ...rest } = JSON.parse(Base64.decode(para));\n      window.richTextHtml = html;\n      this.setState({\n        editorState: BraftEditor.createEditorState(html),\n        ...rest,\n      });\n    };\n    window.switchPreview = str => {\n      this.setState({ preview: str === 'true' ? true : false });\n      if (str === 'false') {\n        this.computeBottomPadding();\n      }\n    };\n  }\n  componentDidMount() {\n    if (!this.state.preview) {\n      this.computeBottomPadding();\n    }\n  }\n\n  computeBottomPadding = () => {\n    const $editor = document.querySelector('.braftEditorWrap ');\n    const $control = document.querySelector('.bf-controlbar');\n    if ($editor && $control) {\n      $editor.style.paddingBottom = $control.offsetHeight + 10 + 'px';\n    }\n  };\n  randomStr = () => Math.random().toString(16).slice(2);\n\n  uploadFile = ({ file, error, progress, success }) => {\n    const { uploadServer, token, key } = this.state;\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.addEventListener('load', data => {\n      const result = get(data, ['target', 'result']);\n      const type = file.type.split('/')[1];\n      const fileData = result.split(',')[1];\n      const fileName = Base64.encode(`${this.randomStr()}.${type}`);\n      const formData = new FormData();\n      formData.append('key', `${key}${fileName}.${type}`);\n      formData.append('token', token);\n      formData.append('file', fileData);\n      axios({\n        url: uploadServer,\n        method: 'POST',\n        data: formData,\n        onUploadProgress: function (data) {\n          progress && progress((data.loaded / data.total) * 100);\n        },\n      })\n        .then(({ data }) => {\n          const { previewServer } = this.state;\n          const { key = '' } = data || {};\n          const url = `${previewServer}/${key}`;\n          success({ url });\n        })\n        .catch(err => {\n          error(err);\n        });\n    });\n  };\n  // computeContentHeight = () => {\n  //   const $wrap = document.querySelector(\".bf-content\");\n  //   const $content = document.querySelector(\"[data-contents='true']\");\n  //   if (!$wrap || !$content) return;\n  //   if ($wrap.offsetHeight < $content.offsetHeight) {\n  //     $wrap.style.height = `${$content.offsetHeight}px`;\n  //   }\n  // };\n\n  handleEditorChange = editorState => {\n    this.setState({ editorState });\n    window.richTextHtml = editorState.toHTML();\n  };\n\n  render() {\n    const controls = [\n      'headings',\n      'text-color',\n      'bold',\n      'italic',\n      'underline',\n      'strike-through',\n      'separator',\n      'list-ul',\n      'list-ol',\n      { key: 'media', title: '添加图片', text: '添加图片' },\n      'separator',\n      'undo',\n      'redo',\n    ];\n    const { editorState, preview } = this.state;\n    return (\n      <AppWrap className={cx('App', 'preview')}>\n        {preview ? (\n          <div className=\"previewWrap\">\n            <div className=\"previewContent\" dangerouslySetInnerHTML={{ __html: editorState.toHTML() }}></div>\n          </div>\n        ) : (\n          <BraftEditor\n            className=\"braftEditorWrap\"\n            media={{\n              accepts: { video: false, audio: false, image: true },\n              externals: {\n                video: false,\n                audio: false,\n                image: true,\n                embed: false,\n              },\n              uploadFn: this.uploadFile,\n            }}\n            controls={controls}\n            value={editorState}\n            onChange={this.handleEditorChange}\n            onSave={this.submitContent}\n          />\n        )}\n      </AppWrap>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { get } from \"lodash\";\n\nwindow.sendContent = () => {\n  if (get(window, [\"webkit\", \"messageHandlers\", \"Save\", \"postMessage\"])) {\n    window.webkit.messageHandlers.Save.postMessage({\n      html: window.richTextHtml\n    });\n  } else {\n    window.Android.Save(window.richTextHtml);\n  }\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}